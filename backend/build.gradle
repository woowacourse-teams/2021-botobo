plugins {
    id "org.asciidoctor.convert" version "1.5.9.2"
    id "org.sonarqube" version "3.3"
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'
    id 'java'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'botobo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // test
    testImplementation 'io.rest-assured:rest-assured:3.3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'

    // lombok
    implementation 'org.projectlombok:lombok'

    // database
    implementation 'org.mariadb.jdbc:mariadb-java-client'

    // restdocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // lombok
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // log
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

    // jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // bind
    implementation 'javax.xml.bind:jaxb-api:2.1'

    // aws s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //test containers
    implementation("com.amazonaws:aws-java-sdk-s3")
    testImplementation "org.testcontainers:localstack:1.15.3"
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.4'

    // FileNameUtils
    implementation 'org.apache.tika:tika-core:2.0.0'

    // Flyway
    implementation('org.flywaydb:flyway-core:6.4.2')

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'it.ozimov:embedded-redis:0.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

}

ext {
    snippetsDir = file('build/generated-snippets')
}

processResources.dependsOn('copyDev')

task copyDev(type: Copy) {
    from '../dev/application-prod.yml'
    into './src/main/resources'

    from '../dev/application-dev.yml'
    into './src/main/resources'

    from '../dev/application-local.yml'
    into './src/main/resources'

    from '../dev/aws-s3-dev.yml'
    into './src/main/resources'

    from '../dev/aws-s3-prod.yml'
    into './src/main/resources'
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = [
                    'botobo.core.infrastructure.**',
                    'botobo.core.exception.**',
                    'botobo.core.dto.**',
                    'botobo.core.DataLoader',
                    'botobo.core.BotoboApplication',
                    'botobo.core.config.**',
                    'botobo.core.scheduler.**'
            ] + Qdomains
        }
    }
}

asciidoctor.doFirst {
    delete file('src/main/resources/static')
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

sonarqube {
    properties {
        property "sonar.projectKey", "botobo-develop"
        property "sonar.host.url", System.getenv('SONAR_URL')
        property "sonar.login", System.getenv('SONAR_LOGIN')
        property "sonar.language", "java"
        property "sonar.binaries", "$buildDir/classes"
        property "sonar.sources", "src/main"
        property "sonar.tests", "src/test/java"
        property "sonar.junit.reportsPath", "$buildDir/test-reports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.reportPaths", "$buildDir/jacoco/jacoco.exec"
        property "sonar.exclusions", "**/exception/**, " +
                "**/dto/**, " +
                "**/DataLoader.java, " +
                "**/BotoboApplication.java"
    }
}

task createDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/index.html")
    into file("src/main/resources/static")
}

build {
    dependsOn createDocument
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
